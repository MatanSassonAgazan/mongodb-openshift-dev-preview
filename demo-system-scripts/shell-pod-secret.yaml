apiVersion: v1
kind: ServiceAccount
metadata:
 name: mongodb-secret-access-sa
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: mongodb-secret-access-cr
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods", "secrets"] 
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
 name: mongodb-secret-access-rb
subjects:
 - kind: ServiceAccount
   name: mongodb-secret-access-sa
   namespace: default
roleRef:
 kind: ClusterRole
 name: mongodb-secret-access-cr
 apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Pod
metadata:
  name: shell-demo-secret
spec:
  serviceAccountName: mongodb-secret-access-sa
  volumes:
  - name: shared-data
    emptyDir: {}
  initContainers:
  - name: centos-debug 
    image: centos
    command:
    - /bin/sh
    - -c
    - |
      TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
      K8S="https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}"
      CACERT="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
      NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
      SECRET_NAME="stuff"
      export SECRET_KEY="foo"
      echo "Contacting ${K8S} in namespace '${NAMESPACE}' for secret '${SECRET_NAME}'"
      SECRET_STUFF=$(curl -sSk --cacert $CACERT -H "Authorization: Bearer ${TOKEN}" ${K8S}/api/v1/namespaces/${NAMESPACE}/secrets/${SECRET_NAME}) 
      SECRET_VALUE=$(echo ${SECRET_STUFF} |  python -c 'import sys,json,base64,os;r=json.load(sys.stdin);print base64.b64decode(r["data"][os.environ["SECRET_KEY"]])')
      echo "The value for '${SECRET_KEY}' in the '${SECRET_NAME}' secret is '${SECRET_VALUE}'"
      echo "Now let's try to create a secret, 'jimmy'='eats up the world!'"
      temp=$(mktemp)
      echo '{ "kind": "Secret", "apiVersion": "v1", "metadata": { "name": "dynostuff" }, "stringData": { "jimmy": "eats up the world!" } }' > ${temp}
      curl -k -X POST -H "Authorization: Bearer $TOKEN" -H 'Accept: application/json' -H 'Content-Type: application/json' ${K8S}/api/v1/namespaces/$NAMESPACE/secrets --data "@${temp}"
  containers:
  - name: centos-secret-user
    image: centos
    command:
    - /bin/sh
    - -c
    - |
      echo "Hello, we found that 'secret_dynostuff_jimmy' is '${secret_dynostuff_jimmy}'"
      sleep 1000
    env:
    - name: secret_dynostuff_jimmy
      valueFrom:
        secretKeyRef:
          key: jimmy
          name: dynostuff
