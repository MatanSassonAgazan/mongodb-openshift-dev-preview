##############################################################################
## Provision my-test-app
## This role executes much of the needed functionality to provision an
## application using an Ansible Playbook Bundle.  Included in the comments
## below are some sample resources for getting started deploying an application
## to OpenShift.
##############################################################################


##############################################################################
## An OpenShift Origin deployment configuration provides a replication
## controller, spins up pods, and also provides the ability to transition from
## one deployment of an image to a new one.
## https://docs.openshift.org/latest/architecture/core_concepts/deployments.html#deployments-and-deployment-configurations
##############################################################################
#- name: create storage class
#  k8s_v1beta1_storage_class:
#    name: fast
#    annotations:
#      storageclass.beta.kubernetes.io/is-default-class: "true"
#    provisioner: kubernetes.io/cinder 
#    parameters:
#      type: fast

#- name: create persistent volumes
#  k8s_v1_persistent_volume_claim:
#    name: "{{ item }}"
#    namespace: default
#    spec_resources_requests:
#      storage: "{{ disk_size_gb }}Gi"
#    spec_access_modes:
#        - ReadWriteOnce
#  with_sequence: start=1 end={{ nodes_per_replicaset }} format=mongo-{{ cluster_name }}-data-volume-%02x

#- name: create deployment config
#  openshift_v1_deployment_config:
#    name: 'mongodb-server-{{ cluster_name }}'
#    namespace: '{{ namespace }}'
#    labels:
#      app: 'mongodb-server-{{ cluster_name }}'
#      service: 'mongodb-server-{{ cluster_name }}'
#    replicas: '{{ nodes_per_replicaset }}'
#    selector:
#      app: 'mongodb-server-{{ cluster_name }}'
#      service: 'mongodb-server-{{ cluster_name }}'
#    spec_template_metadata_labels:
#      app: 'mongodb-server-{{ cluster_name }}'
#      service: 'mongodb-server-{{ cluster_name }}'
#    containers:
#    - env:
#      - name: cluster_name
#        value: '{{ cluster_name }}'
#      - name: mms_base_url
#        value: '{{ mms_base_url }}'
#      - name: mms_user
#        value: '{{ mms_user }}'
#      - name: nodes_per_replicaset
#        value: '{{ nodes_per_replicaset }}'
#      - name: mongodb_version
#        value: '{{ mongodb_version }}'
#      - name: mongodb_port
#        value: '{{ mongodb_port }}'
#      image: library/centos
#      name: 'mongodb-server-{{ cluster_name }}'
#      ports:
#      - container_port: '{{ mongodb_port }}'
#        protocol: TCP

##############################################################################
## An OpenShift Origin route exposes a service at a host name, so that external
## clients can reach it by name. Each route consists of a name, a service
## selector, and an optional security configuration.
## https://docs.openshift.org/latest/architecture/core_concepts/routes.html
##############################################################################
#- name: create my-test-app route
#  openshift_v1_route:
#    name: my-test-app
#    namespace: '{{ namespace }}'
#    labels:
#      app: my-test-app
#      service: my-test-app
#    to_name: my-test-app
#    spec_port_target_port: web


- name: Create secrets for MongoDB Automation Agents
  k8s_v1_secret:
    name: "k8s-mongodb-opsmanager-{{ cluster_name }}"
    namespace: '{{ namespace }}'
    type: Opaque
    state: present
    string_data:
      agent-apikey: "{{ mms_agent_apikey }}"
      group-id: "{{ mms_group_id }}"
      base-url: "{{ mms_base_url }}"

- name: Create Service
  k8s_v1_service:
    name: "mongodb-service-{{ cluster_name }}"
    namespace: '{{ namespace }}'
    labels:
      name: "mongodb-service-{{ cluster_name }}"
    spec_selector:
      app: "mongodb-server-{{ cluster_name }}"
      role: "mongodb-server-{{ cluster_name }}"
    spec_ports:
      - port: "{{ mongodb_port | int }}"
        #targetPort: "{{ mongodb_port | int }}"
    spec_cluster_ip: None

- name: Create StatefulSet
  k8s_v1beta1_stateful_set:
    name: "mongodb-server-{{ cluster_name }}"
    namespace: '{{ namespace }}'
    service_name: "mongodb-service-{{ cluster_name }}"
    replicas: "{{ nodes_per_replicaset }}"
    spec_template_metadata_labels:
      app: "mongodb-server-{{ cluster_name }}"
      role: "mongodb-server-{{ cluster_name }}"
    spec_template_spec_termination_grace_period_seconds: 10
    containers:
      - name: "mongodb-server-{{ cluster_name }}"
        image: centos 
        env:
          - name: MMS_BASE_URL_INTERNAL
            valueFrom: 
              secretKeyRef:
                name: "k8s-mongodb-opsmanager-{{ cluster_name }}"
                key: base-url
          - name: MMS_AGENT_APIKEY
            valueFrom: 
              secretKeyRef:
                name: "k8s-mongodb-opsmanager-{{ cluster_name }}"
                key: agent-apikey
          - name: MMS_GROUP_ID
            valueFrom: 
              secretKeyRef:
                name: "k8s-mongodb-opsmanager-{{ cluster_name }}"
                key: group-id
          - name: MMS_BOOTSTRAP_URL
            value: "https://raw.githubusercontent.com/jasonmimick/k8s-mongodb-opsmanager/master/install-automation-agent.sh"
        command: [ '/bin/sh', '-c' ]
        args: [ "cd /tmp && curl -OL $(MMS_BOOTSTRAP_URL) && chmod +x install-automation-agent.sh && ./install-automation-agent.sh" ]
        ports:
        volumeMounts:
          - name: "pvc"
            mountPath: /data
    spec_volume_claim_templates:
      - name: "pvc"
        metadata:
          name: "pvc"
        spec:
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: "{{ disk_size_gb }}Gi"
